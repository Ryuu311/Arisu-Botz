const axios = require('axios')

async function tts2(m, { text, RyuuBotz, replyryuu }) {
if (!text.includes('|')) {  
    return replyryuu(`‚å¨‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚å¨  
       *L I S T - K A R A K T E R*  
‚å¨‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚å¨  
  
‚Ä¢ *airi* - Airi ü©∑  
‚Ä¢ *akane* - Akane üå∏  
‚Ä¢ *akari* - Akari üß°  
‚Ä¢ *ako* - Ako üíº  
‚Ä¢ *aris* - Aris üéØ  
‚Ä¢ *arona* - Arona ü§ñ  
‚Ä¢ *aru* - Aru üí£  
‚Ä¢ *asuna* - Asuna üìö  
‚Ä¢ *atsuko* - Atsuko üßÉ  
‚Ä¢ *ayane* - Ayane ü¶ã  
‚Ä¢ *azusa* - Azusa üåô  
‚Ä¢ *cherino* - Cherino ‚ùÑÔ∏è  
‚Ä¢ *chihiro* - Chihiro üóÇÔ∏è  
‚Ä¢ *chinatsu* - Chinatsu üíä  
‚Ä¢ *chise* - Chise üî•  
‚Ä¢ *eimi* - Eimi üëì  
‚Ä¢ *erica* - Erica üéÄ  
‚Ä¢ *fubuki* - Fubuki üçÉ  
‚Ä¢ *fuuka* - Fuuka üß∫  
‚Ä¢ *hanae* - Hanae üíê  
‚Ä¢ *hanako* - Hanako üõèÔ∏è  
‚Ä¢ *hare* - Hare ü¶ä  
‚Ä¢ *haruka* - Haruka ü•ã  
‚Ä¢ *haruna* - Haruna üéØ  
‚Ä¢ *hasumi* - Hasumi üî´  
‚Ä¢ *hibiki* - Hibiki üéß  
‚Ä¢ *hihumi* - Hihumi üîÆ  
‚Ä¢ *himari* - Himari üåº  
‚Ä¢ *hina* - Hina üëë  
‚Ä¢ *hinata* - Hinata üêá  
‚Ä¢ *hiyori* - Hiyori üç≠  
‚Ä¢ *hoshino* - Hoshino ‚≠ê  
‚Ä¢ *iori* - Iori üí•  
‚Ä¢ *iroha* - Iroha üöÄ  
‚Ä¢ *izumi* - Izumi üçû  
‚Ä¢ *izuna* - Izuna üê∫  
‚Ä¢ *juri* - Juri üß™  
‚Ä¢ *kaede* - Kaede üçÅ  
‚Ä¢ *karin* - Karin üéØ  
‚Ä¢ *kayoko* - Kayoko üé≠  
‚Ä¢ *kazusa* - Kazusa ü•Ä  
‚Ä¢ *kirino* - Kirino üéÄ  
‚Ä¢ *koharu* - Koharu ‚òÄÔ∏è  
‚Ä¢ *kokona* - Kokona üê§  
‚Ä¢ *kotama* - Kotama üéÆ  
‚Ä¢ *kotori* - Kotori üê¶  
‚Ä¢ *main* - Main üéôÔ∏è  
‚Ä¢ *maki* - Maki üî´  
‚Ä¢ *mari* - Mari üç∞  
‚Ä¢ *marina* - Marina ‚öì  
‚Ä¢ *mashiro* - Mashiro üê±  
‚Ä¢ *michiru* - Michiru üé®  
‚Ä¢ *midori* - Midori üß©  
‚Ä¢ *miku* - Miku üíô  
‚Ä¢ *mimori* - Mimori üß∂  
‚Ä¢ *misaki* - Misaki üíÑ  
‚Ä¢ *miyako* - Miyako üéÄ  
‚Ä¢ *miyu* - Miyu ü¶à  
‚Ä¢ *moe* - Moe üí°  
‚Ä¢ *momoi* - Momoi üñ•Ô∏è  
‚Ä¢ *momoka* - Momoka üé§  
‚Ä¢ *mutsuki* - Mutsuki üéá  
‚Ä¢ *NP0013* - NP0013 ü§ñ  
‚Ä¢ *natsu* - Natsu ‚òÄÔ∏è  
‚Ä¢ *neru* - Neru üèçÔ∏è  
‚Ä¢ *noa* - Noa üíª  
‚Ä¢ *nodoka* - Nodoka üìñ  
‚Ä¢ *nonomi* - Nonomi üçî  
‚Ä¢ *pina* - Pina üç¨  
‚Ä¢ *rin* - Rin üå∏  
‚Ä¢ *saki* - Saki üéµ  
‚Ä¢ *saori* - Saori üî´  
‚Ä¢ *saya* - Saya üíâ  
‚Ä¢ *sena* - Sena üßÉ  
‚Ä¢ *serika* - Serika üéí  
‚Ä¢ *serina* - Serina üíä  
‚Ä¢ *shigure* - Shigure üåßÔ∏è  
‚Ä¢ *shimiko* - Shimiko üçì  
‚Ä¢ *shiroko* - Shiroko üö≤  
‚Ä¢ *shizuko* - Shizuko üì¶  
‚Ä¢ *shun* - Shun üéì  
‚Ä¢ *ShunBaby* - Shun (Baby ver.) üë∂  
‚Ä¢ *sora* - Sora ‚òÅÔ∏è  
‚Ä¢ *sumire* - Sumire üå∏  
‚Ä¢ *suzumi* - Suzumi üìö  
‚Ä¢ *tomoe* - Tomoe üé≠  
‚Ä¢ *tsubaki* - Tsubaki üõ°Ô∏è  
‚Ä¢ *tsurugi* - Tsurugi üó°Ô∏è  
‚Ä¢ *ui* - Ui üçì  
‚Ä¢ *utaha* - Utaha üñãÔ∏è  
‚Ä¢ *wakamo* - Wakamo üêç  
‚Ä¢ *yoshimi* - Yoshimi üç°  
‚Ä¢ *yuuka* - Yuuka üìè  
‚Ä¢ *yuzu* - Yuzu üçã  
‚Ä¢ *zunko* - Zunko üé∂  
  
Gunakan format:  
*.ttsba teks|karakter*  
  
Contoh:  
*.ttsba halo dunia|shiroko*`);  
  }  
  
  let [teks, char, speed] = text.split('|').map(v => v.trim());  
  if (!teks || !char) return replyryuu(`‚ùå Format salah!\nContoh: .ttsba Halo|shiroko`);  
  speed = speed || '1';  
await RyuuBotz.sendMessage(m.chat, { react: { text: "‚è±Ô∏è", key: m.key } });  
  try {  
    const url = `https://api.nekorinn.my.id/tools/ttsba?text=${encodeURIComponent(teks)}&char=${encodeURIComponent(char)}&speed=${speed}`;  
    const response = await axios.get(url, { responseType: 'arraybuffer' });  
  
    await RyuuBotz.sendMessage(m.chat, {  
      audio: Buffer.from(response.data),  
      mimetype: 'audio/mpeg',  
      ptt: false  
    }, { quoted: m });  
  
  } catch (err) {  
    return replyryuu(`‚ùå Gagal memproses suara.\nPastikan karakter *${char}* tersedia dan coba lagi.`);  
  }  
 }

async function tts3(m, { text, RyuuBotz, reply }) {  
  if (!text) return reply(`‚å¨‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚å¨  
       *L I S T - M O D E L*  
‚å¨‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚å¨  
  
‚Ä¢ *miku* - Hatsune Miku üåÄ  
‚Ä¢ *nahida* - Nahida (Exclusive) üåø  
‚Ä¢ *nami* - Nami dari One Piece üåä  
‚Ä¢ *ana* - Ana (Suara wanita umum) üéôÔ∏è  
‚Ä¢ *optimus_prime* - Optimus Prime ü§ñ  
‚Ä¢ *goku* - Goku (Dragon Ball) üü†  
‚Ä¢ *taylor_swift* - Taylor Swift üé§  
‚Ä¢ *elon_musk* - Elon Musk üß†  
‚Ä¢ *mickey_mouse* - Mickey Mouse üê≠  
‚Ä¢ *kendrick_lamar* - Kendrick Lamar üé∂  
‚Ä¢ *angela_adkinsh* - Angela Adkinsh üë©‚Äçüíº  
‚Ä¢ *eminem* - Eminem üéß  
  
Gunakan format:  
*.tts3 teks|model*  
  
Contoh:  
*.tts3 halo dunia|miku*`)  
  
  let [isi, model] = text.split('|').map(v => v.trim().toLowerCase())  
  
  const models = {  
    miku:            { voice_id: "67aee909-5d4b-11ee-a861-00163e2ac61b", voice_name: "Hatsune Miku" },  
    nahida:          { voice_id: "67ae0979-5d4b-11ee-a861-00163e2ac61b", voice_name: "Nahida" },  
    nami:            { voice_id: "67ad95a0-5d4b-11ee-a861-00163e2ac61b", voice_name: "Nami" },  
    ana:             { voice_id: "f2ec72cc-110c-11ef-811c-00163e0255ec", voice_name: "Ana" },  
    optimus_prime:   { voice_id: "67ae0f40-5d4b-11ee-a861-00163e2ac61b", voice_name: "Optimus Prime" },  
    goku:            { voice_id: "67aed50c-5d4b-11ee-a861-00163e2ac61b", voice_name: "Goku" },  
    taylor_swift:    { voice_id: "67ae4751-5d4b-11ee-a861-00163e2ac61b", voice_name: "Taylor Swift" },  
    elon_musk:       { voice_id: "67ada61f-5d4b-11ee-a861-00163e2ac61b", voice_name: "Elon Musk" },  
    mickey_mouse:    { voice_id: "67ae7d37-5d4b-11ee-a861-00163e2ac61b", voice_name: "Mickey Mouse" },  
    kendrick_lamar:  { voice_id: "67add638-5d4b-11ee-a861-00163e2ac61b", voice_name: "Kendrick Lamar" },  
    angela_adkinsh:  { voice_id: "d23f2adb-5d1b-11ee-a861-00163e2ac61b", voice_name: "Angela Adkinsh" },  
    eminem:          { voice_id: "c82964b9-d093-11ee-bfb7-e86f38d7ec1a", voice_name: "Eminem" }  
  }  
  
  if (!isi || !model || !models[model]) return reply(`‚ùå Pastikan format benar: .tts3 teks|model\n\nModel tersedia:\n` + Object.keys(models).join(', '))  
  
  let { voice_id, voice_name } = models[model]  
  let userAgents = [  
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64)",  
    "Mozilla/5.0 (Macintosh; Intel Mac OS X)",  
    "Mozilla/5.0 (Linux; Android 8.0.0)"  
  ]  
  
  function getRandomIp() {  
    return Array.from({ length: 4 }).map(() => Math.floor(Math.random() * 256)).join('.')  
  }  
  
  let proses = await reply('_‚è≥ Sedang membuat suara..._')  
  
  try {  
    let headers = {  
      'Content-Type': 'application/json',  
      'Accept': '*/*',  
      'X-Forwarded-For': getRandomIp(),  
      'User-Agent': userAgents[Math.floor(Math.random() * userAgents.length)]  
    }  
  
    let payload = {  
      raw_text: isi,  
      url: "https://filme.imyfone.com/text-to-speech/anime-text-to-speech/",  
      product_id: "200054",  
      convert_data: [{  
        voice_id,  
        speed: "1",  
        volume: "50",  
        text: isi,  
        pos: 0  
      }]  
    }  
  
    const endpoint = 'https://voxbox-tts-api.imyfone.com/pc/v1/voice/tts'  
    const res = await axios.post(endpoint, payload, { headers })  
    const result = res.data?.data?.convert_result?.[0]?.oss_url  
  
    if (!result) throw 'Gagal mendapatkan suara. Coba lagi nanti.'  
  
    await RyuuBotz.sendMessage(m.chat, {  
      audio: { url: result },  
      mimetype: 'audio/mpeg',  
      ptt: true  
    }, { quoted: m })  
  
  } catch (e) {  
    reply(`‚ùå Error: ${e.message || e}`)  
  } finally {  
    if (proses?.key) await RyuuBotz.sendMessage(m.chat, { delete: proses.key })  
  }  
}

module.exports = {
  tts2,
  ttsba: tts2, // alias
  'tts-blue-archive': tts2,
  tts3
}